<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.instagramclone.repository.PostRepository">

    <!-- insert만 특별하게 auto_increment로 지정한 key를 지정해줌   -->
    <insert id="saveFeed" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO posts
            (content, member_id)
        VALUES
            (#{content}, #{memberId})
    </insert>

    <insert id="saveFeedImage" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO post_images
            (post_id, image_url, image_order)
        VALUES
            (#{postId}, #{imageUrl}, #{imageOrder})
    </insert>

    <select id="findImagesByPostId" resultType="PostImage">
        SELECT
            *
        FROM post_images
        WHERE post_id = #{postId}
        ORDER BY image_order
    </select>

    <!--  전체 피드 목록 조회   -->
    <select id="findAll" resultMap="PostResultMap">
        SELECT
            p.*,
            u.username,
            u.profile_image_url,
            pi.id AS image_id,
            pi.image_url,
            pi.image_order
        FROM
            (   SELECT p.id
                FROM posts p
                ORDER BY p.created_at DESC
                LIMIT #{limit} OFFSET #{offset}
        ) filtered_posts
        INNER JOIN posts p ON filtered_posts.id = p.id
        INNER JOIN users u ON p.member_id = u.id
        LEFT JOIN post_images pi ON p.id = pi.post_id
        ORDER BY p.created_at DESC, pi.image_order ASC;
    </select>

    <resultMap id="PostResultMap" type="Post">
        <id property="id" column="id"/>
        <result property="content" column="content"/>
        <result property="memberId" column="member_id"/>
        <result property="viewCount" column="view_count"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <!--    내부 단일 객체 매핑 설정    -->
        <association property="member" javaType="Member">
            <id property="id" column="id"/>
            <result property="username" column="username"/>
            <result property="name" column="name"/>
            <result property="profileImageUrl" column="profile_image_url"/>
        </association>

        <!--   내부 리스트 객체 매핑 설정   -->
        <collection property="images" ofType="PostImage">
            <id property="id" column="image_id" />
            <result property="imageUrl" column="image_url" />
            <result property="imageOrder" column="image_order" />
        </collection>

    </resultMap>


<!-- 특정 사용자의 피드 개수  조회 -->
    <select id="countByMemberId" resultType="long">
        SELECT COUNT(*)
        FROM posts
        WHERE member_id = #{memberId}
    </select>

<!--  특정 사용자의 프로필 피드 목록 조회  -->
    <select id="findProfilePosts" resultType="ProfilePostResponse">
        SELECT
            p.id,
            pi.image_url as mainThumbnail,
            NVL(l.likeCount, 0) AS likeCount,
            NVL(c.commentCount, 0) AS commentCount
        FROM posts p
        INNER JOIN
            (
                SELECT post_id, image_url
                FROM post_images
                WHERE image_order = 1
        ) pi
        ON p.id = pi.post_id
        LEFT JOIN (
            SELECT post_id, COUNT(*) AS likeCount
            FROM post_likes
            GROUP BY post_id
        ) l
        ON p.id = l.post_id

        LEFT JOIN (
            SELECT
                post_id
                , COUNT(*) AS commentCount
            FROM comments
            GROUP BY post_id
        ) c
        ON p.id = c.post_id
        WHERE p.member_id = #{memberId}
        ORDER BY p.created_at DESC
    </select>


    <select id="findPostsByHashtag" resultType="ProfilePostResponse">
        SELECT
            p.id,
            pi.image_url           AS mainThumbnail,
            NVL(l.likeCount, 0)    AS likeCount,
            NVL(c.commentCount, 0) AS commentCount
        FROM posts p
        INNER JOIN post_hashtags ph ON p.id = ph.post_id
        INNER JOIN (
                SELECT id, name
                FROM hashtags
                WHERE name = #{tagName}
        ) h ON ph.hashtag_id = h.id
        LEFT OUTER JOIN
            (SELECT post_id, image_url
            FROM post_images
            WHERE image_order = 1) pi ON p.id = pi.post_id
        LEFT OUTER JOIN
            (SELECT post_id, COUNT(*) AS likeCount
            FROM post_likes
            GROUP BY post_id) l ON p.id = l.post_id
        LEFT OUTER JOIN
            (SELECT post_id, COUNT(*) AS commentCount
            FROM comments
            GROUP BY post_id) c ON p.id = c.post_id
        ORDER BY p.created_at DESC
        LIMIT #{limit} OFFSET #{offset}

    </select>


    <!--  단일 피드 1개를 조회해서 상세보기 처리  -->
    <select id="findPostDetailById" resultMap="PostResultMap">
        SELECT
            p.id
            , p.content
            , p.created_at
            , u.username
            , u.profile_image_url
            , u.name
            , pi.id AS image_id
            , pi.image_url
            , pi.image_order
        FROM posts p
            INNER JOIN users u
                ON p.member_id = u.id
            INNER JOIN post_images pi
                ON p.id = pi.post_id
        WHERE p.id = #{postId}
        ORDER BY pi.image_order
    </select>

    <!-- 팔로잉 기반 피드 조회 -->
    <select id="findFeedPosts" resultMap="PostResultMap">
        SELECT
            p.*,
            u.username,
            u.profile_image_url,
            pi.id AS image_id,
            pi.image_url,
            pi.image_order
        FROM (
                SELECT p.id
                FROM posts p
                WHERE p.member_id IN (
                        SELECT follower_id
                        FROM follows
                        WHERE following_id = #{memberId}
                    )
                     OR p.member_id = #{memberId} -- 본인 게시물 포함
                ORDER BY p.created_at DESC
                LIMIT #{limit} OFFSET #{offset}
        ) sub
        INNER JOIN posts p ON sub.id = p.id
        INNER JOIN users u ON p.member_id = u.id
        LEFT JOIN post_images pi ON p.id = pi.post_id
        ORDER BY p.created_at DESC, pi.image_order ASC;
    </select>


    <!-- 추천 피드 조회 (팔로잉이 없는 경우) -->
    <select id="findRecommendedPosts" resultMap="PostResultMap">
        SELECT
            p.*,
            u.username,
            u.profile_image_url,
            pi.id AS image_id,
            pi.image_url,
            pi.image_order,
            sub.like_count,
            sub.comment_count
        FROM (
            SELECT p.id,
                COUNT(DISTINCT l.id) AS like_count,    -- 좋아요 수
                COUNT(DISTINCT c.id) AS comment_count  -- 댓글 수
            FROM posts p
            LEFT JOIN post_likes l ON p.id = l.post_id
            LEFT JOIN comments c ON p.id = c.post_id
            WHERE p.created_at >= DATE_SUB(NOW(), INTERVAL 7 DAY) -- 최근 1주일 게시물
            GROUP BY p.id, p.created_at
            ORDER BY (COUNT(DISTINCT l.id) + COUNT(DISTINCT c.id)) DESC, -- 인기도 순
                    p.created_at DESC
            LIMIT #{limit} OFFSET #{offset}
        ) sub
        INNER JOIN posts p ON sub.id = p.id
        INNER JOIN users u ON p.member_id = u.id
        LEFT JOIN post_images pi ON p.id = pi.post_id
        ORDER BY p.created_at DESC, pi.image_order ASC;
    </select>



</mapper>